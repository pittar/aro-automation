# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  LOCATION: 'canadacentral'
  RESOURCEGROUP: 'aro-rg'
  CLUSTER: 'aro-nonprod'

### Subscription ID to set sub context for automation ###
parameters:
  - name: azureSubscription
    type: string
  - name: clientId
    type: string
  - name: clientSecret
    type: string

steps:
- task: AzureCLI@2
  name: DownloadPullSecret
  displayName: 'Download pullsecret'
  enabled: false
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    addSpnToEnvironment: true
    scriptLocation: 'inlineScript'
    useGlobalConfig: true
    inlineScript: |
      #!/bin/bash
      
      echo "Download pullsecret"
      # az keyvault secret list --vault-name ocp-key-vault
      az keyvault secret download \
        --file pullsecret.txt \
        --name pullsecret \
        --vault-name ocp-key-vault

      echo "Listing files."
      ls -la

- task: AzureCLI@2
  name: CreateRG
  displayName: 'Create ARO ResourceGroup'
  enabled: false
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    addSpnToEnvironment: true
    scriptLocation: 'inlineScript'
    useGlobalConfig: true
    inlineScript: |
      #!/bin/bash
      # az provider register -n Microsoft.RedHatOpenShift --wait
      
      echo "Create Resource Group"
      az group create \
        --name $RESOURCEGROUP \
        --location $LOCATION

- task: AzureCLI@2
  name: CreateVNET
  displayName: 'Create ARO VNet'
  enabled: false
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    addSpnToEnvironment: true
    scriptLocation: 'inlineScript'
    useGlobalConfig: true
    inlineScript: |
      echo "Create VNet"
      az network vnet create \
        --resource-group $RESOURCEGROUP \
        --name aro-vnet \
        --address-prefixes 10.0.0.0/22

- task: AzureCLI@2
  name: CreateSubnets
  displayName: 'Create and Configure ARO Subnets'
  enabled: false
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    addSpnToEnvironment: true
    scriptLocation: 'inlineScript'
    useGlobalConfig: true
    inlineScript: |
      echo "Create supervisor node subnet"
      az network vnet subnet create \
        --resource-group $RESOURCEGROUP \
        --vnet-name aro-vnet \
        --name supervisor-subnet \
        --address-prefixes 10.0.0.0/23 \
        --service-endpoints Microsoft.ContainerRegistry

      echo "Create worker node subnet"
      az network vnet subnet create \
        --resource-group $RESOURCEGROUP \
        --vnet-name aro-vnet \
        --name worker-subnet \
        --address-prefixes 10.0.2.0/23 \
        --service-endpoints Microsoft.ContainerRegistry

      echo "Disable private link policies"
      az network vnet subnet update \
        --name supervisor-subnet \
        --resource-group $RESOURCEGROUP \
        --vnet-name aro-vnet \
        --disable-private-link-service-network-policies true

- task: AzureCLI@2
  name: CreateCluster
  displayName: 'Create ARO Cluster'
  enabled: false
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    addSpnToEnvironment: true
    scriptLocation: 'inlineScript'
    useGlobalConfig: true
    inlineScript: |
      echo "Create the cluster!"
      az aro create \
        --resource-group $RESOURCEGROUP \
        --cluster-resource-group "$CLUSTER"-cluster-rg \
        --name $CLUSTER \
        --vnet aro-vnet \
        --master-subnet supervisor-subnet \
        --worker-subnet worker-subnet \
        --client-id ${{ parameters.clientID }} \
        --client-secret ${{ parameters.clientSecret }} \
        --pull-secret @pullsecret.txt

- task: AzureCLI@2
  name: ClusterDetails
  displayName: 'Get ARO Cluster URL and kubeadmin password'
  enabled: true
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    addSpnToEnvironment: true
    scriptLocation: 'inlineScript'
    useGlobalConfig: true
    inlineScript: |
      echo "Fetching console URL and credentials."
      CONSOLE_URL=$(az aro show \
        --name $CLUSTER \
        --resource-group $RESOURCEGROUP \
        --query "consoleProfile.url" -o tsv)

      CREDS_JSON=$(az aro list-credentials \
        --name $CLUSTER \
        --resource-group $RESOURCEGROUP)

      KUBEADMIN_CREDS=$(echo $CREDS_JSON | jq -r .kubeadminPassword)
      echo "##vso[task.setvariable variable=kubeadminPass]$KUBEADMIN_CREDS"
      API_URL=$(echo "${CONSOLE/console-openshift-console.apps/api}")
      API_URL=$(echo "${API_URL/'.io/'/:6443}")
      echo "##vso[task.setvariable variable=apiUrl]$API_URL"
      echo "##vso[task.setvariable variable=consoleUrl]$CONSOLE_URL"

      echo "Console:   $CONSOLE_URL"
      echo "API:       $API_URL"
      echo "kubeadmin: $KUBEADMIN_CREDS"
      
- task: AzureCLI@2
  displayName: 'Test variables'
  name: OutputVarables
  enabled: true
  inputs:
    azureSubscription: ${{ parameters.azureSubscription }}
    scriptType: 'bash'
    addSpnToEnvironment: true
    scriptLocation: 'inlineScript'
    useGlobalConfig: true
    inlineScript: |
      echo "kubeadmin password: $(kubeadminPass)"
      echo "API URL:            $(apiUrl)"
